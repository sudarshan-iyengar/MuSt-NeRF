import numpy as np

import json

def poses_to_points(poses, dist):
    """Converts from pose matrices to (position, lookat, up) format."""
    pos = poses[:, :3, -1]
    lookat = poses[:, :3, -1] - dist * poses[:, :3, 2]
    up = poses[:, :3, -1] + dist * poses[:, :3, 1]
    return np.stack([pos, lookat, up], 1)

def interp(points, n, k, s):
    """Runs multidimensional B-spline interpolation on the input points."""
    sh = points.shape
    pts = np.reshape(points, (sh[0], -1))
    k = min(k, sh[0] - 1)
    tck, _ = scipy.interpolate.splprep(pts.T, k=k, s=s)
    u = np.linspace(0, 1, n, endpoint=False)
    new_points = np.array(scipy.interpolate.splev(u, tck))
    new_points = np.reshape(new_points.T, (n, sh[1], sh[2]))
    return new_points

def generate_interpolated_path(poses: np.ndarray, n_interp: int, spline_degree: int = 5, smoothness: float = .03,rot_weight: float =0.1):
    points = poses_to_points(poses, dist=rot_weight)
    new_points = interp(points,
    n_interp * (points.shape[0] - 1),
    k=spline_degree,
    s=smoothness)
    return points_to_poses(new_points)



def main():
    matrix1 = np.array([
        [-0.720989515048508, 0.05223663130406729, 0.6909742785137113, -0.44044059107408945],
        [0.6918932166957282, -0.000676696346356031, 0.721999528235705, 1.728682675763722],
        [0.038182402927855276, 0.9986345059427744, -0.03565427989172549, 1.2240240849540598],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix2 = np.array([
        [-0.8793781330664507, -0.007978698108293717, 0.4760571809021313, -0.857407195873705],
        [0.4756891080771085, -0.057449982255933965, 0.8777353655833209, 1.7038760003430937],
        [0.020346291094675232, 0.9983165028900965, 0.054315637927674715, 1.070800279542733],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix3 = np.array([
        [-0.8924852121144015, -0.06146441638497088, 0.44686941236002126, -1.132544948326441],
        [0.44915022054693965, -0.21255239362671757, 0.8678050238079267, 1.0957474201100985],
        [0.04164403391138719, 0.9752146458643456, 0.21730662428646336, 0.9652698355072904],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix4 = np.array([
        [-0.9582841305667718, -0.07424826502660821, 0.27600492798471715, -1.6061727498978657],
        [0.28550743863622735, -0.29362181758910666, 0.9122892801733111, 0.7391167006723882],
        [0.013305172363181426, 0.9530337997161603, 0.30257156015474296, 0.8993961521952827],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix5 = np.array([
        [-0.98856614042861, 0.013882507109374238, 0.15014746758391684, -2.456684231386237],
        [0.13680162771039567, -0.3362433015788523, 0.9317863257202409, 0.26973871044867104],
        [0.06342161051534889, 0.9416728296834883, 0.3304995933175158, 1.0004329525025428],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix6 = np.array([
        [-0.9950237861762934, 0.08928789153873859, 0.044219197136364324, -2.2061224838294113],
        [0.025968908393410983, -0.19606318828119298, 0.9802473371542286, -0.14490809149703437],
        [0.09619397469475424, 0.9765177410840944, 0.1927688268573378, 1.1690628437366724],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix7 = np.array([
        [-0.9868278057082356, 0.09482990714890069, -0.1310655203271369, -2.098049801020031],
        [-0.1325358120361647, -0.009348464638071454, 0.9911341305478852, -0.8281750014741626],
        [0.09276389618991376, 0.9954495943776097, 0.02179368359482286, 1.401074383158752],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix8 = np.array([
        [-0.9794604168403155, 0.1636654185268858, -0.11777488123041682, -1.7573081736660632],
        [-0.15045795590036462, -0.20437123982862038, 0.9672614950659848, -0.6926750091176378],
        [0.13423745891718689, 0.965114515037253, 0.22479830407584547, 1.1258870578837752],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix9 = np.array([
        [-0.9734038550336386, 0.1785683955129008, -0.14352095023732064, -1.5725845704276407],
        [-0.18537900395004273, -0.24584624588011184, 0.9514169686742158, -0.6291350529275807],
        [0.13460891473891076, 0.9527187158528582, 0.2724105147823875, 0.99858022300667],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix10 = np.array([
        [-0.9263216792277916, 0.18211446876996437, -0.3297915506568675, -1.3819169707987278],
        [-0.3591281071809777, -0.16238204097749973, 0.9190533582990037, -1.7053809678195013],
        [0.11382068902507816, 0.9697764655111554, 0.21582042933434045, 1.1478631515929982],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix11 = np.array([
        [-0.8528099743711539, 0.22091939026740215, -0.47319105089210595, -2.3380945323358073],
        [-0.5148253492739759, -0.20370287477621773, 0.8327424563170301, -1.2327915863831373],
        [0.08757857831423552, 0.9537818208783463, 0.28745474567304563, 1.159330133266893],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix12 = np.array([
        [-0.6558031867036026, 0.16207251989973315, -0.7373294234127472, -3.713595925853114],
        [-0.7507873077184357, -0.037816188822525555, 0.6594606541954798, -2.4787078543071734],
        [0.07899746130000754, 0.986053971232681, 0.14648196800946062, 1.491860326085361],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix13 = np.array([
        [-0.5006593851272657, 0.10041703489702172, -0.859800325199928, -3.905095160070883],
        [-0.8622806651672364, 0.029624114929781602, 0.5055635136097764, -3.0172520939508627],
        [0.07623801263920009, 0.9945043141910515, 0.07175607647944166, 1.6736843746768975],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix14 = np.array([
        [-0.285765286939822, 0.16610855685021925, -0.9437934880834697, -3.0876998994451603],
        [-0.9567469734377894, 0.006587275391764197, 0.29084675796823106, -3.8772552150987534],
        [0.05452916284962741, 0.9860854705204629, 0.157041444386087, 1.5648285869899625],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix15 = np.array([
        [-0.08100140210659029, 0.43263343964515005, -0.8979237605637778, -1.775295642196541],
        [-0.9932332371747615, 0.04018718783930707, 0.10896204157870432, -4.7166247029962],
        [0.08322565367010622, 0.9006738015851685, 0.42645069320709955, 1.244960138575143],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix16 = np.array([
        [-0.21141392950070545, 0.41999281893593216, -0.8825588832949016, -3.0498822294980235],
        [-0.9739413032725813, -0.014664718244999054, 0.2263256145878949, -3.5318226618570314],
        [0.0821126555100366, 0.9074089365377196, 0.41214867914878284, 1.2849571200524132],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix17 = np.array([
        [-0.26183494624526227, 0.33046559825916505, -0.906771718416149, -3.641816134310432],
        [-0.9601398530066406, 0.006061489438545283, 0.2794543272419665, -2.5803621385662563],
        [0.09784642863247998, 0.9437985731820674, 0.3157060811749988, 1.3214657334111393],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix18 = np.array([
        [-0.3357291536997078, 0.3786175256499451, -0.8625164952939828, -3.4055330740561565],
        [-0.9318707218556236, 0.00014951266661316576, 0.36279048415625387, -1.6796687744153673],
        [0.13748779258179564, 0.9255532112980728, 0.35277239117357506, 1.2104906298178062],
        [0.0, 0.0, 0.0, 1.0]
    ])

    matrix19 = np.array([
        [-0.4600207016638007, 0.31015024810340336, -0.8319782314877989, -2.7851961643746397],
        [-0.881188899375158, -0.04441416056516507, 0.4706734600116917, -0.968397295537915],
        [0.10902787563829226, 0.9496495174379311, 0.29373238907416604, 1.1701094149019922],
        [0.0, 0.0, 0.0, 1.0]
    ])

    poses = np.stack([matrix1, matrix2, matrix3, matrix4, matrix5, matrix6, matrix7, matrix8, matrix9, matrix10,
                      matrix11, matrix12, matrix13, matrix14, matrix15, matrix16, matrix17, matrix18, matrix19])

    np.save("poses.npy", poses)

    keyframes = np.load("poses.npy")

    n_interp = 15
    spline_degree = 1
    smoothness = 0.03

    # Generate interpolated poses.
    interpolated_poses = generate_interpolated_path(
        keyframes, n_interp, spline_degree, smoothness)

    near = 0.10000000149011612
    far = 7.7079997062683109
    depth_scaling_factor = 1000.0
    fx = 584.0
    fy = 584.0
    cx = 312.0
    cy = 234.0

    # Convert numpy array to list for JSON serialization
    interpolated_poses = interpolated_poses.tolist()

    # Create JSON structure
    json_data = {
        "near": near,
        "far": far,
        "depth_scaling_factor": depth_scaling_factor,
        "frames": []
    }

    # Populate JSON structure with interpolated poses
    for i, pose in enumerate(interpolated_poses):
        pose.append([0.0, 0.0, 0.0, 1.0])
        frame_data = {
            "file_path": "",
            "depth_file_path": "",
            "fx": fx,
            "fy": fy,
            "cx": cx,
            "cy": cy,
            "transform_matrix": pose
        }
        json_data["frames"].append(frame_data)

    # Save JSON to file
    with open("interpolated_poses.json", "w") as f:
        json.dump(json_data, f, indent=4)

    # Save interpolated poses to a text file.
    # with open("interpolated_poses.txt", "w") as f:
    #     for i, pose in enumerate(interpolated_poses):
    #         f.write(f"Pose {i+1}:\n{pose}\n\n")


if __name__ == "__main__":
    main()
